###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "chat-history.baml": "class ChatMessage {\n  role \"user\" | \"assistant\"\n  content string\n}\n\nclass ChatResponse {\n  content string\n}\n\nclass MCPTool {\n  name string\n  description string\n  input_schema string\n}\n\nclass ToolCall {\n  name string\n  args string @description(\"The arguments to pass to the tool. Must be a valid JSON object.\")\n}\n\nfunction ChatWithLLM(messages: ChatMessage[], available_tools: MCPTool[]) -> ChatResponse | ToolCall {\n  client CustomGPT4oMini\n  prompt #\"\n    You are a helpful assistant with access to these tools:\n    {% for tool in available_tools %}\n    - Name: {{ tool.name }}\n      Description: {{ tool.description }}\n      Parameters: {{ tool.input_schema }}\n    {% endfor %}\n\n    When you need to use a tool, respond with a ToolCall.\n\n    {{ ctx.output_format }}\n\n    Chat history:\n    {% for message in messages %}\n      {{ _.role(message.role) }} \n      {{ message.content }}\n    {% endfor %}\n  \"#\n}\n\ntest TestName {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"Hello!\"\n      }\n      {\n        role \"assistant\"\n        content \"Hi!\"\n      }\n      {\n        role \"user\"\n        content \"get_forecast for Montgomery Village, MD\"\n      }\n    ]\n    available_tools [\n      {\n        name \"get_alerts\"\n        description \"Get weather alerts for a US state.\"\n        input_schema \"{\\\"properties\\\": {\\\"state\\\": {\\\"title\\\": \\\"State\\\", \\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"state\\\"], \\\"title\\\": \\\"get_alertsArguments\\\", \\\"type\\\": \\\"object\\\"}\"\n      }\n      {\n        name \"get_forecast\"\n        description \"Get the weather forecast for a location.\"\n        input_schema \"{\\\"properties\\\": {\\\"latitude\\\": {\\\"title\\\": \\\"Latitude\\\", \\\"type\\\": \\\"number\\\"}, \\\"longitude\\\": {\\\"title\\\": \\\"Longitude\\\", \\\"type\\\": \\\"number\\\"}}, \\\"required\\\": [\\\"latitude\\\", \\\"longitude\\\"], \\\"title\\\": \\\"get_forecastArguments\\\", \\\"type\\\": \\\"object\\\"}\"\n      }\n    ]\n  }\n}\n\n",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.83.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return file_map